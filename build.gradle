/*
 * Root build configuration that 
 * contains 3 sub projects.
 * Primarily brings in spring and camel versions.

 */
buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
	}
}

apply plugin: 'org.hidetake.ssh'

def buildEnv = project.hasProperty('env') ? project.getProperty('env') : ''
def configFile = file("$rootDir/gradle/config/buildConfig.groovy")
def parsedConfig = new ConfigSlurper(buildEnv).parse(configFile.toURL())


if (buildEnv == '') {
	throw new GradleException('Required env property.')
}

allprojects {
	version = project.getProperty('v')
	ext {
		config = parsedConfig
		springVersion='4.3.7.RELEASE'
		restletVersion='2.3.9'
		camelVersion='2.19.0'
		jacksonVersion='2.9.0.pr2'
		applicationDefaultJvmArgs = ['-Dcustom.logging.root=' + parsedConfig.logging, '-Dcustom.application.keystore=' + parsedConfig.keystorefile, '-Dcustom.application.keystorepass=' + parsedConfig.keystorepass]
		buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'pmd'
	group = 'com.muk'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		mavenCentral()
		jcenter()
		maven {
			url 'http://maven.restlet.org'
		}
	}
	
	ext.sharedManifest = manifest {
		attributes ('Created-By': 'mizuuenikaze inc.',
		'Implementation-Version': version)
	}

	dependencies {
		compile group: 'org.springframework', name: 'spring-core', version: springVersion
		compile group: 'org.springframework', name: 'spring-context', version: springVersion
		compile group: 'org.springframework', name: 'spring-beans', version: springVersion
		compile 'javax.inject:javax.inject:1'
		compile group: 'org.apache.camel', name: 'camel', version: camelVersion
		compile group: 'org.apache.camel', name: 'camel-spring', version: camelVersion

		testCompile group: 'junit', name: 'junit', version: '4.12'
		testCompile group: 'org.springframework', name: 'spring-test', version: springVersion
		testCompile 'org.mockito:mockito-core:1.+'
	}

	pmd {
		ignoreFailures = true
	}

	tasks.withType(Pmd) {
		reports {
			xml.enabled = false
			html.enabled = true
		}
	}

	tasks.withType(JavaCompile) {
		options.incremental = true
	}

	test {
		systemProperty applicationDefaultJvmArgs[0].tokenize('=')[0].substring(2), applicationDefaultJvmArgs[0].tokenize('=')[1]
		systemProperty applicationDefaultJvmArgs[1].tokenize('=')[0].substring(2), applicationDefaultJvmArgs[1].tokenize('=')[1]
		systemProperty applicationDefaultJvmArgs[2].tokenize('=')[0].substring(2), applicationDefaultJvmArgs[2].tokenize('=')[1]
	}
}

project(':services') {
	dependencies {
		compile project(':muk-core')
	}

	task buildProperties(dependsOn: ['buildRoutes'])

	task buildRoutes(type: PropertyBuilderTask) {
		propertyRoot = config.properties.services.route
		fileName = 'route'
	}

	build.mustRunAfter('buildProperties')
}

project(':webapp') {
	dependencies {
		compile project(':muk-core'), project(':services')
	}

	task buildProperties(dependsOn: ['buildSecurity', 'buildCamel'])

	task buildSecurity(type: PropertyBuilderTask) {
		propertyRoot = config.properties.webapp.security
		fileName = 'security'
	}

	task buildCamel(type: PropertyBuilderTask) {
		propertyRoot = config.properties.webapp.camel
		fileName = 'camel'
	}

	build.mustRunAfter('buildProperties')
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.0'
}

// epack alludes to a task that packages a project to be used in a portage ebuild
task epack(dependsOn: ['services:buildProperties', 'webapp:buildProperties'] + subprojects.build) {
	doLast {
		println '******'
		println '\tProduction build ' + version
		println '\tCreate tag and release to github as v' + version
		println '\tCreate a new branch, next rev and bump minor version'
		println '******'
	}
}

class PropertyBuilderTask extends DefaultTask {
	ConfigObject propertyRoot
	String fileName

	@TaskAction
	def generateFile() {
		def prop = propertyRoot.toProperties()
		def propFile = new File("${project.projectDir}/src/main/resources/" + fileName + '.properties')
		propFile.createNewFile()
		prop.store(propFile.newWriter(), null)
	}
}
