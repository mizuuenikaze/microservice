/*
 * Standalone application with embedded jetty
 */

buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
}

apply plugin: 'distribution'
apply plugin: 'war'

archivesBaseName  = 'muk-microservices'

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integrationtest/java')
		}
		resources.srcDir file('src/integrationtest/resources')
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
	compile 'javax.validation:validation-api:2.0.0.Final'
	compile 'org.apache.felix:org.apache.felix.framework:5.6.10'
	compile group: 'org.springframework.security', name: 'spring-security-web', version: springSecVersion
	compile group: 'org.springframework.security', name: 'spring-security-config', version: springSecVersion
	compile group: 'org.apache.camel', name: 'camel-spring-javaconfig', version: camelVersion
	compile group: 'org.apache.camel', name: 'camel-spring-security', version: camelVersion
	compile group: 'org.apache.camel', name: 'camel-test-spring', version: camelVersion
	compile group: 'org.apache.camel', name: 'camel-swagger-java', version: camelVersion
	compile 'org.apache.activemq:activemq-kahadb-store:5.15.2'
	compile 'org.slf4j:slf4j-api:1.7.25'
	compile 'org.slf4j:slf4j-log4j12:1.7.25'
	compile 'log4j:log4j:1.2.17'
	
	compile group: 'org.restlet.jee', name: 'org.restlet.ext.spring', version: restletVersion
	compile 'org.eclipse.jetty:jetty-webapp:9.4.7.v20170914'
	compile 'org.eclipse.jetty:jetty-annotations:9.4.7.v20170914'
	compile 'javax.servlet:javax.servlet-api:3.1.0'
	
	testCompile 'commons-io:commons-io:2.6'
}

ext.mainClassName = 'com.muk.app.StandAloneEntry'

task appRun (type: JavaExec) {
	main = mainClassName
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs = applicationDefaultJvmArgs
	args = ['-hp', config.properties.webapp.camel.camel.jetty.httpPort, '-x', 'y']
	debug = false
}

task appDebug (type: JavaExec) {
	main = mainClassName
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs = applicationDefaultJvmArgs
	args = ['-hp', config.properties.webapp.camel.camel.jetty.httpPort, '-x', 'y']
	debug = true
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

war {
	enabled = project.hasProperty('warify')
}

task warex (type: Copy) {
	into "$buildDir/exploded"
	with war

	doLast {
		ant.move(file: "$buildDir/exploded/WEB-INF/classes/com/muk/app", toFile: "$buildDir/exploded/com/muk/app")
		ant.move(todir: "$buildDir/appLibs") {
			fileset(dir: "$buildDir/exploded/WEB-INF/lib") {
				patternset() {
					include(name: '*jetty*.jar')
				}
				patternset() {
					include(name: 'asm*.jar')
				}
				patternset() {
					include(name: 'javax.*annotation-api*.jar')
				}
			}
		}

		copy {
			from "$buildDir/exploded/WEB-INF/lib"
			include 'camel-core*.jar'
			include 'javax.servlet-api*.jar'
			include 'slf4j*.jar'
			include 'log4j*.jar'

			into "$buildDir/appLibs"
		}

		copy {
			from "$buildDir/exploded/WEB-INF/classes"
			include 'log4j.xml'
			
			into "$buildDir/exploded"
		}

		jar.manifest {
			attributes ('Implementation-Title': 'MUK micro services')
			from sharedManifest
		}
		jar.manifest.writeTo("$buildDir/exploded/META-INF/MANIFEST.MF")
	}
}

task microsvc (type: Zip, dependsOn: warex) {
	extension = 'jar'
	metadataCharset = 'UTF-8'
	destinationDir = file("$libsDir")
	from "$buildDir/exploded"
}

/* --------- Distribution custom tasks ------------------------ */
task createStartScripts (type: CreateStartScripts, dependsOn: microsvc) {
	outputDir = file("$buildDir/scripts")
	applicationName = 'microservice'
	mainClassName = project.ext.mainClassName
	defaultJvmOpts = applicationDefaultJvmArgs
	//This must be modified buy the ebuild or other package management tool or manually.
	classpath = fileTree(dir: "$buildDir").matching { include 'appLibs/*.jar', "libs/$project.archivesBaseName*.jar" }
}

distributions {
	microservice {
		baseName = 'microservice'
	}
}

CopySpec libChildSpec = project.copySpec();
libChildSpec.into("lib");
libChildSpec.from(["$buildDir/libs"]) {
	include "$project.archivesBaseName*.jar"
}

CopySpec binChildSpec = project.copySpec();
binChildSpec.into("bin");
binChildSpec.from(project.createStartScripts);
binChildSpec.setFileMode(0755);

CopySpec childSpec = project.copySpec();
childSpec.from(project.file("src/dist"));
childSpec.with(libChildSpec);
childSpec.with(binChildSpec);

distributions.microservice.getContents().with(childSpec);


distTar.enabled = false
distZip.enabled = false
microserviceDistZip.enabled = false

/* ----------- task depends ---------------*/
check.dependsOn integrationTest
assemble.dependsOn microsvc
integrationTest.mustRunAfter test
microsvc.mustRunAfter war
